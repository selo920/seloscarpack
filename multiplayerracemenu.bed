

local tracks

dofile("data/menu/cup_final_results_elements1.bed")
dofile("data/menu/garage_elements1.bed")
dofile("data/menu/race_type_images1.bed")
dofile("data/menu/race_type_images2.bed")
dofile("data/menu/race_type_images3.bed")
--dofile("data/menu/single_player_track_images19.bed")
dofile("data/menu/single_player_images2.bed")
dofile("data/menu/single_player_images3.bed")

dofile("data/menu/single_player_track_images1.bed")
dofile("data/menu/single_player_track_images2.bed")
dofile("data/menu/single_player_track_images3.bed")
dofile("data/menu/single_player_track_images4.bed")
dofile("data/menu/single_player_track_images5.bed")
dofile("data/menu/single_player_track_images6.bed")
dofile("data/menu/single_player_track_images7.bed")
dofile("data/menu/single_player_track_images8.bed")
dofile("data/menu/single_player_track_images9.bed")
dofile("data/menu/single_player_track_images10.bed")
dofile("data/menu/single_player_track_images11.bed")
dofile("data/menu/single_player_track_images12.bed")
dofile("data/menu/single_player_track_images13.bed")
dofile("data/menu/single_player_track_images14.bed")
dofile("data/menu/single_player_track_images15.bed")
dofile("data/menu/single_player_track_images16.bed")
dofile("data/menu/single_player_track_images17.bed")
dofile("data/menu/single_player_track_images18.bed")
dofile("data/menu/single_player_track_images19.bed")
dofile("data/menu/single_player_track_images20.bed")
dofile("data/menu/single_player_track_images21.bed")
dofile("data/menu/single_player_track_images22.bed")
dofile("data/menu/single_player_track_images23.bed")
dofile("data/menu/single_player_track_images24.bed")
dofile("data/menu/single_player_track_images25.bed")
dofile("data/menu/single_player_track_images26.bed")
dofile("data/menu/single_player_track_images27.bed")
dofile("data/menu/single_player_track_images28.bed")
dofile("data/menu/single_player_track_images29.bed")
dofile("data/menu/single_player_track_images30.bed")

dofile("data/menu/single_player_track_images31.bed")
dofile("data/menu/single_player_track_images32.bed")
dofile("data/menu/single_player_track_images33.bed")
dofile("data/menu/single_player_track_images34.bed")
dofile("data/menu/single_player_track_images35.bed")
dofile("data/menu/single_player_track_images36.bed")
dofile("data/menu/single_player_track_images37.bed")
dofile("data/menu/single_player_track_images38.bed")
dofile("data/menu/single_player_track_images39.bed")
dofile("data/menu/single_player_track_images40.bed")
dofile("data/menu/single_player_track_images41.bed")
dofile("data/menu/single_player_track_images42.bed")
dofile("data/menu/single_player_track_images43.bed")
dofile("data/menu/single_player_track_images44.bed")
dofile("data/menu/single_player_track_images45.bed")
dofile("data/menu/single_player_track_images46.bed")
dofile("data/menu/single_player_track_images47.bed")
dofile("data/menu/single_player_track_images48.bed")
dofile("data/menu/single_player_track_images49.bed")
dofile("data/menu/single_player_track_images50.bed")
dofile("data/menu/single_player_track_images51.bed")
dofile("data/menu/single_player_track_images52.bed")
dofile("data/menu/single_player_track_images53.bed")
dofile("data/menu/single_player_track_images54.bed")
dofile("data/menu/single_player_track_images55.bed")
dofile("data/menu/single_player_track_images56.bed")
dofile("data/menu/single_player_track_images57.bed")
dofile("data/menu/single_player_track_images58.bed")
dofile("data/menu/single_player_track_images59.bed")
dofile("data/menu/single_player_track_images60.bed")
dofile("data/menu/single_player_track_images61.bed")
dofile("data/menu/single_player_track_images62.bed")
dofile("data/menu/single_player_track_images63.bed")
dofile("data/menu/single_player_track_images64.bed")
dofile("data/menu/single_player_track_images65.bed")

local mprace_selected
local mprace_back
local mprace_ok
local mprace_rules
local mprace_numplayers
local mprace_event

local SelectedRow

-- GZ: this is to activate/disable additional derby modes:
--   1 = Wrecking + Survivor
--   2 = Wrecking + Survivor + Tag(Hunter & Prey)
--   3 = Wrecking + Survivor + Tag(Hunter & Prey) + Frag
local usingDerbyMode = 2

function EnterMultiplayerRaceSelection(rules, okaction, backaction, numplayers)
	mprace_rules = rules
	mprace_ok = okaction
	mprace_back = backaction
	mprace_numplayers = numplayers
	mprace_edit = false
	EnterMenu("menu_multiplayer_trackselection")
end

function EnterMultiplayerRaceEdit(rules, event, okaction, backaction, numplayers)
	mprace_rules = rules
	mprace_event = event
	mprace_ok = okaction
	mprace_back = backaction
	mprace_numplayers = numplayers
	mprace_edit = true
	EnterMenu("menu_multiplayer_trackselection")
end

GameModeNames = {
	[ReplicatedSession.GAMETYPE_TOURNAMENT]			= MULTIPLAYER_GAMETYPE_MIXED,
	[ReplicatedSession.GAMETYPE_TOURNAMENT_RACE]	= MULTIPLAYER_GAMETYPE_RACE,
	[ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY]	= MULTIPLAYER_GAMETYPE_DERBY,
	[ReplicatedSession.GAMETYPE_RACE]				= MULTIPLAYER_GAMEMODE_RACE,
	[ReplicatedSession.GAMETYPE_DERBY_WRECKING]		= MULTIPLAYER_GAMEMODE_WRECKINGDERBY,
	[ReplicatedSession.GAMETYPE_STUNT]				= MULTIPLAYER_GAMETYPE_STUNT,
	
	[ReplicatedSession.GAMETYPE_PONGRACE]			= MULTIPLAYER_GAMEMODE_PONGRACE,
	[ReplicatedSession.GAMETYPE_DERBY_LMS]			= MULTIPLAYER_GAMEMODE_SURVIVORDERBY,
	[ReplicatedSession.GAMETYPE_HUNTER_PREY]		= MULTIPLAYER_GAMEMODE_TAG,
	[ReplicatedSession.GAMETYPE_DERBY_FRAG]			= MULTIPLAYER_GAMEMODE_FRAGDERBY,
	
}

local TrackTypeImages = {
	[TRACKTYPE_STUNT] = "singleplayer_image_stunt",
	[TRACKTYPE_DERBY] = "singleplayer_image_derby",
	[TRACKTYPE_EVENT] = "singleplayer_image_event",
	[TRACKTYPE_FOREST] = "race_type_image1",
	[TRACKTYPE_FIELDS] = "race_type_image2",
	[TRACKTYPE_DESERT] = "race_type_image3",
	[TRACKTYPE_CANAL] = "race_type_image4",
	[TRACKTYPE_CITY] = "race_type_image5",
	[TRACKTYPE_RACING] = "race_type_image6",
}

local SelectedTrack

menu_multiplayer_trackselection = CreateMenuFromTemplate("template_multiplayer")
menu_multiplayer_trackselection.options.title=TRANSLATOR(TITLE_SELECTRACE)

function menu_multiplayer_trackselection.create(self)
	self.parent:create(self)

	self:addResource("cup_final_results_elements1.tga",cup_final_results_elements1,cup_final_results_elements1_size)
	self:addResource("garage_elements1.tga",garage_elements1,garage_elements1_size)
	self:addResource("race_type_images1.tga",race_type_images1,race_type_images1_size)
	self:addResource("race_type_images2.tga",race_type_images2,race_type_images2_size)
	self:addResource("race_type_images3.tga",race_type_images3,race_type_images3_size)
	self:addResource("single_player_images2.tga",single_player_images2,single_player_images2_size)
	self:addResource("single_player_images3.tga",single_player_images3,single_player_images3_size)
	--self:addResource("single_player_track_images19.tga",single_player_track_images19,single_player_track_images19_size)	

	self:addResource("single_player_track_images1.tga",single_player_track_images1,single_player_track_images1_size)	
	self:addResource("single_player_track_images2.tga",single_player_track_images2,single_player_track_images2_size)	
	self:addResource("single_player_track_images3.tga",single_player_track_images3,single_player_track_images3_size)	
	self:addResource("single_player_track_images4.tga",single_player_track_images4,single_player_track_images4_size)	
	self:addResource("single_player_track_images5.tga",single_player_track_images5,single_player_track_images5_size)	
	self:addResource("single_player_track_images6.tga",single_player_track_images6,single_player_track_images6_size)	
	self:addResource("single_player_track_images7.tga",single_player_track_images7,single_player_track_images7_size)	
	self:addResource("single_player_track_images8.tga",single_player_track_images8,single_player_track_images8_size)	
	self:addResource("single_player_track_images9.tga",single_player_track_images9,single_player_track_images9_size)	
	self:addResource("single_player_track_images10.tga",single_player_track_images10,single_player_track_images10_size)	
	self:addResource("single_player_track_images11.tga",single_player_track_images11,single_player_track_images11_size)	
	self:addResource("single_player_track_images12.tga",single_player_track_images12,single_player_track_images12_size)	
	self:addResource("single_player_track_images13.tga",single_player_track_images13,single_player_track_images13_size)	
	self:addResource("single_player_track_images14.tga",single_player_track_images14,single_player_track_images14_size)	
	self:addResource("single_player_track_images15.tga",single_player_track_images15,single_player_track_images15_size)	
	self:addResource("single_player_track_images16.tga",single_player_track_images16,single_player_track_images16_size)	
	self:addResource("single_player_track_images17.tga",single_player_track_images17,single_player_track_images17_size)	
	self:addResource("single_player_track_images18.tga",single_player_track_images18,single_player_track_images18_size)	
	self:addResource("single_player_track_images19.tga",single_player_track_images19,single_player_track_images19_size)	
	self:addResource("single_player_track_images20.tga",single_player_track_images20,single_player_track_images20_size)	
	self:addResource("single_player_track_images21.tga",single_player_track_images21,single_player_track_images21_size)	
	self:addResource("single_player_track_images22.tga",single_player_track_images22,single_player_track_images22_size)	
	self:addResource("single_player_track_images23.tga",single_player_track_images23,single_player_track_images23_size)	
	self:addResource("single_player_track_images24.tga",single_player_track_images24,single_player_track_images24_size)	
	self:addResource("single_player_track_images25.tga",single_player_track_images25,single_player_track_images25_size)	
	self:addResource("single_player_track_images26.tga",single_player_track_images26,single_player_track_images26_size)	
	self:addResource("single_player_track_images27.tga",single_player_track_images27,single_player_track_images27_size)	
	self:addResource("single_player_track_images28.tga",single_player_track_images28,single_player_track_images28_size)	
	self:addResource("single_player_track_images29.tga",single_player_track_images29,single_player_track_images29_size)	
	self:addResource("single_player_track_images30.tga",single_player_track_images30,single_player_track_images30_size)	
	self:addResource("single_player_track_images31.tga",single_player_track_images31,single_player_track_images31_size)	
	self:addResource("single_player_track_images32.tga",single_player_track_images32,single_player_track_images32_size)	
	self:addResource("single_player_track_images33.tga",single_player_track_images33,single_player_track_images33_size)	
	self:addResource("single_player_track_images34.tga",single_player_track_images34,single_player_track_images34_size)	
	self:addResource("single_player_track_images35.tga",single_player_track_images35,single_player_track_images35_size)	
	self:addResource("single_player_track_images36.tga",single_player_track_images36,single_player_track_images36_size)	
	self:addResource("single_player_track_images37.tga",single_player_track_images37,single_player_track_images37_size)	
	self:addResource("single_player_track_images38.tga",single_player_track_images38,single_player_track_images38_size)	
	self:addResource("single_player_track_images39.tga",single_player_track_images39,single_player_track_images39_size)	
	self:addResource("single_player_track_images40.tga",single_player_track_images40,single_player_track_images40_size)	
	self:addResource("single_player_track_images41.tga",single_player_track_images41,single_player_track_images41_size)	
	self:addResource("single_player_track_images42.tga",single_player_track_images42,single_player_track_images42_size)	
	self:addResource("single_player_track_images43.tga",single_player_track_images43,single_player_track_images43_size)	
	self:addResource("single_player_track_images44.tga",single_player_track_images44,single_player_track_images44_size)	
	self:addResource("single_player_track_images45.tga",single_player_track_images45,single_player_track_images45_size)	
	self:addResource("single_player_track_images46.tga",single_player_track_images46,single_player_track_images46_size)	
	self:addResource("single_player_track_images47.tga",single_player_track_images47,single_player_track_images47_size)	
	self:addResource("single_player_track_images48.tga",single_player_track_images48,single_player_track_images48_size)	
	self:addResource("single_player_track_images49.tga",single_player_track_images49,single_player_track_images49_size)	
	self:addResource("single_player_track_images50.tga",single_player_track_images50,single_player_track_images50_size)	
	self:addResource("single_player_track_images51.tga",single_player_track_images51,single_player_track_images51_size)	
	self:addResource("single_player_track_images52.tga",single_player_track_images52,single_player_track_images52_size)	
	self:addResource("single_player_track_images53.tga",single_player_track_images53,single_player_track_images53_size)	
	self:addResource("single_player_track_images54.tga",single_player_track_images54,single_player_track_images54_size)	
	self:addResource("single_player_track_images55.tga",single_player_track_images55,single_player_track_images55_size)	
	self:addResource("single_player_track_images56.tga",single_player_track_images56,single_player_track_images56_size)	
	self:addResource("single_player_track_images57.tga",single_player_track_images57,single_player_track_images57_size)	
	self:addResource("single_player_track_images58.tga",single_player_track_images58,single_player_track_images58_size)	
	self:addResource("single_player_track_images59.tga",single_player_track_images59,single_player_track_images59_size)	
	self:addResource("single_player_track_images60.tga",single_player_track_images60,single_player_track_images60_size)	
	self:addResource("single_player_track_images61.tga",single_player_track_images61,single_player_track_images61_size)	
	self:addResource("single_player_track_images62.tga",single_player_track_images62,single_player_track_images62_size)	
	self:addResource("single_player_track_images63.tga",single_player_track_images63,single_player_track_images63_size)	
	self:addResource("single_player_track_images64.tga",single_player_track_images64,single_player_track_images64_size)	
	self:addResource("single_player_track_images65.tga",single_player_track_images65,single_player_track_images65_size)	
				
	--local racetype=race_type_names[RaceSelectionState.RaceType].tracktype
	--local files=trackfiles[racetype]
	--for k,v in ipairs(files) do
		--for k,v in ipairs(Levels) do
			--self:addResource(v..".tga",_G[v],_G[v.."_size"])
			--self:addResource("single_player_track_images"..v..".tga",single_player_track_images19,single_player_track_images19_size)	
		--end

	self:loadResources()
end

local OnGameTypeChanged, OnTrackTypeChanged, OnGameModeChanged

local EmptyOption = {
	L"",
	{nil},
	{-1000},
	1,
	false,
}

local TimeLimitDerbyOption =
{
	MULTIPLAYER_TIMELIMIT,
	{L"6",L"9",L"12",L"15"},
	{6,9,12,15},
	1,
	true
}

local LapsOption = 
{
	MULTIPLAYER_LAPS,
	{L"1", L"2", L"3", L"4", L"5", L"6", L"7", L"8", L"9", L"10", L"12", L"15" },
	{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15 },
	4,
	true,
}

local TrackTypeRaces = 
{
	MULTIPLAYER_TRACKTYPE,
	{RACETRACKTYPE_FOREST, RACETRACKTYPE_FIELDS, RACETRACKTYPE_CANAL, RACETRACKTYPE_CITY, RACETRACKTYPE_DESERT, RACETRACKTYPE_RACING, RACETRACKTYPE_ARENA, L(RACETRACKTYPE_FO1_SNOW) ,L(RACETRACKTYPE_FO1_PIT),L(RACETRACKTYPE_FO1_FOREST),L(RACETRACKTYPE_FO1_TOWN),L(RACETRACKTYPE_FO1_RACING)},
	{TRACKTYPE_FOREST, TRACKTYPE_FIELDS, TRACKTYPE_CANAL, TRACKTYPE_CITY, TRACKTYPE_DESERT, TRACKTYPE_RACING, TRACKTYPE_EVENT,TRACKTYPE_FO1_SNOW,TRACKTYPE_FO1_PIT,TRACKTYPE_FO1_FOREST,TRACKTYPE_FO1_TOWN,TRACKTYPE_FO1_RACING},
	1,
	true,
	function()OnTrackTypeChanged()end,
}

local TrackTypeDerby = 
{
	MULTIPLAYER_TRACKTYPE,
	{RACETRACKTYPE_DERBY, RACETRACKTYPE_ARENA, },
	{TRACKTYPE_DERBY, TRACKTYPE_EVENT},
	--{RACETRACKTYPE_DERBY, RACETRACKTYPE_ARENA, RACETRACKTYPE_FOREST, RACETRACKTYPE_FIELDS, RACETRACKTYPE_CANAL, RACETRACKTYPE_CITY, RACETRACKTYPE_DESERT, RACETRACKTYPE_RACING},
	--{TRACKTYPE_DERBY, TRACKTYPE_EVENT, TRACKTYPE_FOREST, TRACKTYPE_FIELDS, TRACKTYPE_CANAL, TRACKTYPE_CITY, TRACKTYPE_DESERT, TRACKTYPE_RACING, TRACKTYPE_STUNT},
	1,
	true,
	function()OnTrackTypeChanged()end,
}

local GameModeRace =
{
	MULTIPLAYER_GAMEMODE,
	{MULTIPLAYER_GAMEMODE_RACE, MULTIPLAYER_GAMEMODE_PONGRACE },
	{1, 2},
	1,
	true,
	function()OnGameModeChanged()end,
	{MULTIPLAYER_GAMEMODE_RACE_DESCRIPTION, MULTIPLAYER_GAMEMODE_PONGRACE_DESCRIPTION }
}

local GameModeDerby =
{
	{
		MULTIPLAYER_GAMEMODE,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY},
		{3, 4},
		1,
		true,
		function()OnGameModeChanged()end,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_SURVIVORDERBY_DESCRIPTION}
	},
	{
		MULTIPLAYER_GAMEMODE,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY, MULTIPLAYER_GAMEMODE_TAG},
		{3, 4, 5},
		1,
		true,
		function()OnGameModeChanged()end,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_SURVIVORDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_TAG_DESCRIPTION},
	},
	{
		MULTIPLAYER_GAMEMODE,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY, MULTIPLAYER_GAMEMODE_SURVIVORDERBY, MULTIPLAYER_GAMEMODE_TAG, MULTIPLAYER_GAMEMODE_FRAGDERBY },
		{3, 4, 5, 6},
		1,
		true,
		function()OnGameModeChanged()end,
		{MULTIPLAYER_GAMEMODE_WRECKINGDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_SURVIVORDERBY_DESCRIPTION, MULTIPLAYER_GAMEMODE_TAG_DESCRIPTION, MULTIPLAYER_GAMEMODE_FRAGDERBY_DESCRIPTION }
	},
}

local Options = {
	{
		MULTIPLAYER_GAMETYPE,
		{MULTIPLAYER_GAMETYPE_RACE, MULTIPLAYER_GAMETYPE_STUNT, MULTIPLAYER_GAMETYPE_DERBY },
		{1, 2, 3},
		1,
		true,
		function()OnGameTypeChanged()end,
		{MULTIPLAYER_GAMETYPE_RACE_DESCRIPTION, MULTIPLAYER_GAMETYPE_STUNT_DESCRIPTION, MULTIPLAYER_GAMETYPE_DERBY_DESCRIPTION }
	},

	{
		-- Game mode
	},

	{
		-- Track type
	},

	{
		-- Values set in OnTrackTypeChanged
		MULTIPLAYER_TRACK,
		{L""},
		{1},
		1,
		true,
	},
	{
		MULTIPLAYER_LAPS,
		{L"1", L"2", L"3", L"4", L"5", L"6", L"7", L"8", L"9", L"10"},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		4,
		true,
	},
}

local GameType = 1
local GameMode = 2
local TrackType = 3
local Track = 4
local Laps = 5

local Label=1
local ItemLabels=2
local ItemValues=3
local SelectedItem=4
local Enabled=5
local OnChanged=6
local Descriptions=7

local NumOptions = 5

local function GetSelectedItem(Items, RowNr)
	return Items[RowNr][SelectedItem]
end

local function SetSelectedItem(Items, RowNr, Item)
	Items[RowNr][SelectedItem]=Item
end

local function GetSelectedItemValue(Items, rowNr)
	return Items[rowNr][ItemValues][Items[rowNr][SelectedItem] ]
end

local function GetSelectedItemLabel(Items, rowNr)
	return Items[rowNr][ItemLabels][Items[rowNr][SelectedItem] ]
end

local function GetNumItems(Items, RowNr)
	return table.getn(Items[RowNr][ItemValues])
end

OnGameModeChanged = function()
	local gameMode = GetSelectedItemValue(Options, GameMode)
	if gameMode == 1 or gameMode == 2 then	-- race & pong race
		Options[Laps] = LapsOption
	elseif gameMode == 4 then				-- survivor
		Options[Laps] = EmptyOption
	else									-- wrecking, frag & hunter&prey
		Options[Laps] = TimeLimitDerbyOption
	end
end

OnGameTypeChanged = function()
	local gameType = GetSelectedItemValue(Options, GameType)
	if gameType == 1 then -- Race
		Options[TrackType] = TrackTypeRaces
		SetSelectedItem(Options, TrackType, 1)
		Options[Laps] = LapsOption
		Options[Laps][Label] = MULTIPLAYER_LAPS
		Options[GameMode] = GameModeRace
		OnTrackTypeChanged()
		OnGameModeChanged()
	elseif gameType == 3 then -- Derby
		Options[TrackType] = TrackTypeDerby
		SetSelectedItem(Options, TrackType, 1)
		Options[Laps] = TimeLimitDerbyOption
		Options[Laps][Label] = MULTIPLAYER_MINUTES
		Options[GameMode] = GameModeDerby[usingDerbyMode]
		OnTrackTypeChanged()
		OnGameModeChanged()
	elseif gameType == 2 then -- Stunt
		Options[TrackType] = EmptyOption
		Options[Laps] = EmptyOption
		Options[GameMode] = EmptyOption
		ValidTracks = { }
		SelectedTrack = 1
		for i,l in ipairs(Levels) do
			if l and l.TrackType == TRACKTYPE_STUNT then
				table.insert(ValidTracks, i)
			end
		end
	end
end

OnTrackTypeChanged = function()
	local tt = GetSelectedItemValue(Options, TrackType)
	ValidTracks = { }
	SelectedTrack = 1
	
	for i,l in ipairs(Levels) do
		if l.TrackType and l.TrackType == tt then
			table.insert(ValidTracks, i)
		end
	end
end

local function UpdateArrows(self)
	local leftarrow = wm.GetWindow("leftarrow")
	local rightarrow = wm.GetWindow("rightarrow")
	
	local leftArrowSize = wm.GetResourceSize(self:getResource("selection_arrow_r"))
	local rightArrowSize = wm.GetResourceSize(self:getResource("selection_arrow_l"))

	local value = wm.GetWindow("optionvalue_row"..SelectedRow)
	local xpos,ypos = value:GetPosition()
	leftarrow:SetPosition(xpos - 5 - leftArrowSize[1], ypos + 3)

	local w,_ = wm.GetTextExtents(value:GetTitle(), fontmedium())
	rightarrow:SetPosition(xpos + w + 9, ypos + 3)
end

local function RefreshInfo(self)
	for i = 1, NumOptions do
		local labelwin = wm.GetWindow("optionlabel_row"..i)
		
		labelwin:SetTitle(Options[i][Label])
		local x,y = labelwin:GetPosition()
		local w,h = wm.GetTextExtents(labelwin:GetTitle(), fontmedium())
		
		local valuewin = wm.GetWindow("optionvalue_row"..i)
		valuewin:SetPosition(x+w+20,y)

		local value = nil
		if i == Track then
			value = L(Levels[ValidTracks[SelectedTrack]].Name)
		else
			value = GetSelectedItemLabel(Options, i)
		end

		if value ~= nil then
			valuewin:SetTitle(value)
		else
			valuewin:SetTitle(L"")
		end
		
		if Options[i][Enabled] then
			labelwin:SetLayer(4)
			valuewin:SetLayer(4)
		else
			labelwin:SetLayer(2)
			valuewin:SetLayer(2)
		end
	end
	
	if SelectedTrack then
		local leveldata = Levels[ValidTracks[SelectedTrack]]

		W("track_name"):SetTitle(L(leveldata.Name))

		local tracktype
		local gametype = GetSelectedItemValue(Options, GameType)
		if gametype == 2 then
			tracktype = TRACKTYPE_STUNT
		else
			tracktype = GetSelectedItemValue(Options, TrackType)
		end

		--W("track_image"):AttachResource(self:getResource(TrackTypeImages[tracktype]))
		local icon=leveldata.TrackIcon or ""
		W("track_image"):AttachResource(self:getResource(icon.."_sp"))
		
	end

	if SelectedRow == Track then
		if SelectedTrack then
			local leveldata = Levels[ValidTracks[SelectedTrack]]
			local desc = W("infotext")
			if leveldata.Description == tostring(leveldata.Description) then
				desc:SetTitle(L(leveldata.Description))
			else
				desc:SetTitle(TRANSLATOR(leveldata.Description))
			end
			desc:WordWrap()
			local w,h = wm.GetTextExtents(desc:GetTitle(), fontmedium())
			local w2,h2 = desc:GetParent():GetSize()
			desc:SetPosition(320, (h2-h)/2)
		end
	else
		local descs = Options[SelectedRow][Descriptions]
		local desc
		if descs ~= nil then
			if type(descs) == "table" then
				desc = descs[GetSelectedItem(Options, SelectedRow)]
			else
				desc = descs
			end
		end
		
		local infotext = wm.GetWindow("infotext")
		if desc then
			infotext:SetTitle(desc)
			infotext:WordWrap()
			local w,h = wm.GetTextExtents(infotext:GetTitle(), fontmedium())
			local w2,h2 = infotext:GetParent():GetSize()
			infotext:SetPosition(320, (h2-h)/2)
		else
			infotext:SetTitle(L"")
		end
	end
end

function menu_multiplayer_trackselection.init(self)
	self.parent:init(self)

	GUI:SetBackground("data/menu/menu_background.tga")

	if menu_multiplayer_buildtournament.partymode then
		wm.GetWindow("menubar_gamespy_logo"):HideWindow()
	end

	if not XBOX then
		Options[GameType][Descriptions] = {PS2ONLINE_GAMETYPE_RACE_DESCRIPTION, PS2ONLINE_GAMETYPE_STUNT_DESCRIPTION, PS2ONLINE_GAMETYPE_DERBY_DESCRIPTION }
	end
	
	Frame{Name="race_bar_bg",Position=POS(0,335),Size=SIZE(640,64)}:AttachResource(self:getResource("selection_bg"))

	Frame{Position=POS(284,72),Size=SIZE(58,32)}:AttachResource(self:getResource("upshop_top_n_bottom_infotxt_bar_ang"))
	Frame{Position=POS(342,72),Size=SIZE(298,32)}:AttachResource(self:getResource("upshop_top_n_bottom_infotxt_bar"))

	StaticText{Name="track_name",Position=POS(441,79),Align=FONTF_CENTER,Font=fontlarge(),Color=GetPaletteColor(33)}

	local x=301
	local y=131
	local black50={0,0,0,0.58*MAX_VERTEXCOLOR_A}
	
	for i = 1, NumOptions do
		Frame { Name="optionbg_left_row"..i, Position=POS(x,y), Size=SIZE(20,26), Color={0,0,0,MAX_VERTEXCOLOR_A}, Layer=3 }:AttachResource(self:getResource("multip_add_track_ang"))
		Frame { Name="optionbg_row"..i, Position=POS(x+20,PS2 and y + 1 or y), Size=SIZE(319,26), Layer=3, Color=black50, DrawBackgroundColor=TRUE }
		
		local win = StaticText { Name="optionlabel_row"..i, Position=POS(x+11,y+5), Size=SIZE(100,16), Font=fontmedium(), Color=GetPaletteColor(33) }
		win:SetTitle(Options[i][Label])
		
		local w,h = wm.GetTextExtents(win:GetTitle(), fontmedium())
		StaticText { Name="optionvalue_row"..i, Position=POS(x+w+20,y+5), Size=SIZE(100,16), Font=fontmedium(), Color=GetPaletteColor(34) }
		
		y = y + 32
		x = x + 9
	end

	local arrowSize = GetResourceSize(self:getResource("selection_arrow_r"))
	Frame { Name="leftarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("selection_arrow_r"))
	arrowSize = GetResourceSize(self:getResource("selection_arrow_l"))
	Frame { Name="rightarrow", Position=POS(0,0), Size=arrowSize, Layer=4 }:AttachResource(self:getResource("selection_arrow_l"))

	Frame{Position=POS(0,72),Size=SIZE(273,143)}:AttachResource(self:getResource("big_bottom"))
	Frame{Position=POS(273,72),Size=SIZE(45,143)}:AttachResource(self:getResource("big_bottom_ang"))

	Frame{Position=POS(0,215),Size=SIZE(313,101)}:AttachResource(self:getResource("big_bottom_race_sel"))
	Frame{Position=POS(313,215),Size=SIZE(34,101)}:AttachResource(self:getResource("big_bottom_race_sel_ang"))

	Frame{Name="track_image",Position=POS(0,84),Size=SIZE(332,219)}

	local descframe = Frame{Position=POS(0,333),Size=SIZE(640,64)}:AttachResource(self:getResource("darker_selection_bg"))
	StaticText { Name="infotext",Position=POS(320,0),Size=SIZE(640-2*TITLESAFE_X,64),Font=fontmedium(),Color=GetPaletteColor(34),Align=FONTF_CENTER, Parent=descframe }

	if not mprace_edit and (mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT or mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE or mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY) then
		-- "Add race" with tournament types that have multiple game modes to choose from
		if mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT or mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT_RACE then
			SetSelectedItem(Options, GameType, 1)
		elseif mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY then
			SetSelectedItem(Options, GameType, 3)
		end
		OnGameTypeChanged()
		Options[GameType][Enabled] = (mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT)
	else
		-- "Add race" with a specific game mode or "Edit event"
		local etype
		if mprace_edit then
			etype = mprace_event.rules
		else
			etype = mprace_rules
		end	

		if etype == ReplicatedSession.GAMETYPE_TOURNAMENT then
			SetSelectedItem(Options, GameType, 1)
		elseif etype == ReplicatedSession.GAMETYPE_RACE or etype == ReplicatedSession.GAMETYPE_PONGRACE then
			SetSelectedItem(Options, GameType, 1)
		elseif etype == ReplicatedSession.GAMETYPE_STUNT then
			SetSelectedItem(Options, GameType, 2)
		else
			SetSelectedItem(Options, GameType, 3)
		end
		OnGameTypeChanged()

		local gamemode = 0
		if etype == ReplicatedSession.GAMETYPE_RACE then
			gamemode = 1
		elseif etype == ReplicatedSession.GAMETYPE_PONGRACE then
			gamemode = 2
		elseif etype == ReplicatedSession.GAMETYPE_STUNT then
			gamemode = 0 -- No gamemode
		elseif etype == ReplicatedSession.GAMETYPE_DERBY_WRECKING then
			gamemode = 3
		elseif etype == ReplicatedSession.GAMETYPE_DERBY_LMS then
			gamemode = 4
		elseif etype == ReplicatedSession.GAMETYPE_HUNTER_PREY then
			gamemode = 5
		elseif etype == ReplicatedSession.GAMETYPE_DERBY_FRAG then
			gamemode = 6
		else
			-- problem...
		end
		if gamemode ~= nil then
			for i = 1, table.getn(Options[GameMode][ItemValues]) do
				if Options[GameMode][ItemValues][i] == gamemode then
					SetSelectedItem(Options, GameMode, i)
					break
				end
			end
		end

		if mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT or mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT_DERBY then
			Options[GameType][Enabled] = (mprace_rules == ReplicatedSession.GAMETYPE_TOURNAMENT)
		else
			Options[GameType][Enabled] = false
		end

		if mprace_event then
			--GZ if etype == ReplicatedSession.GAMETYPE_RACE then
			if etype ~= ReplicatedSession.GAMETYPE_STUNT then
				local tracktype = Levels[mprace_event.trackid].TrackType
				local level = Levels[mprace_event.trackid]
				local tracktype = level.TrackType

				for i = 1, table.getn(Options[TrackType][ItemValues]) do
					if Options[TrackType][ItemValues][i] == tracktype then
						SetSelectedItem(Options, TrackType, i)
						break
					end
				end
				OnTrackTypeChanged()
			end
		
			--GZ if etype == ReplicatedSession.GAMETYPE_RACE or etype == ReplicatedSession.GAMETYPE_DERBY_WRECKING then
			if etype ~= ReplicatedSession.GAMETYPE_STUNT and etype ~= ReplicatedSession.GAMETYPE_DERBY_LMS then
				for i = 1, table.getn(Options[Laps][ItemValues]) do
					if Options[Laps][ItemValues][i] == mprace_event.lapsOrTimeLimit then
						SetSelectedItem(Options, Laps, i)
                                              break
					end
				end
			end
			

			if etype == ReplicatedSession.GAMETYPE_DERBY_WRECKING then
				local level = Levels[mprace_event.trackid]
				for i = 1, table.getn(Options[TrackType][ItemValues]) do
					if Options[TrackType][ItemValues][i] == level.TrackType then
						SetSelectedItem(Options, TrackType, i)
						break
					end
				end
				OnTrackTypeChanged()
			end

			
			for i,v in ipairs(ValidTracks) do
				if mprace_event.trackid == v then
					SelectedTrack = i
				end
			end
		end
	end

	SelectedRow = 1
	while Options[SelectedRow][Enabled] == false do
		SelectedRow = SelectedRow + 1
	end

	RefreshInfo(self)
	UpdateArrows(self)
	
	local handler = InputHandler { Name="handler" }
	handler.onKeyPressed = function(Self, Character, VirtualKey, ScanCode)
		if VirtualKey == KeyCodes["BUTTON_START"] then
			local newrules
			local gametype = GetSelectedItemValue(Options, GameType)
			-- TODO: use gameMode
			if gametype == 1 then
				newrules = ReplicatedSession.GAMETYPE_RACE
			elseif gametype == 4 then
				newrules = ReplicatedSession.GAMETYPE_PONGRACE
			elseif gametype == 2 then
				newrules = ReplicatedSession.GAMETYPE_STUNT
			else
				newrules = ReplicatedSession.GAMETYPE_DERBY_WRECKING
			end
			local gametype = GetSelectedItemValue(Options, GameType)
			if gametype == 2 then --stunt
				newrules = ReplicatedSession.GAMETYPE_STUNT
			else
				local gamemode = GetSelectedItemValue(Options, GameMode)
				local derbySettings = db:GetTable("Settings.Derbies")
				if gamemode == 1 then		-- race
					newrules = ReplicatedSession.GAMETYPE_RACE
				elseif gamemode == 2 then	-- pong race
					newrules = ReplicatedSession.GAMETYPE_PONGRACE
				elseif gamemode == 3 then	-- wrecking derby
					newrules = ReplicatedSession.GAMETYPE_DERBY_WRECKING
					derbySettings.InactivityTimer = 45
				elseif gamemode == 4 then	-- survivor derby
					newrules = ReplicatedSession.GAMETYPE_DERBY_LMS
					derbySettings.InactivityTimer = 1800
				elseif gamemode == 5 then	-- hunter & prey derby
					newrules = ReplicatedSession.GAMETYPE_HUNTER_PREY
				elseif gamemode == 6 then	-- frag derby
					newrules = ReplicatedSession.GAMETYPE_DERBY_FRAG
				else
					-- problem...
				end
			end
			
			local event = {
				rules = newrules,
				trackid = ValidTracks[SelectedTrack],
				lapsOrTimeLimit = GetSelectedItemValue(Options, Laps),
			}
			
			if mprace_edit then
				event.num = mprace_event.num
			end
			
			playmenusound_action()
			
			mprace_ok(event)
		elseif VirtualKey == KeyCodes["BUTTON_SELECT"] then
			playmenusound_back()
			mprace_back(mprace_event)
		elseif VirtualKey == KeyCodes["BUTTON_LEFT"] then
			playmenusound_move()
			local oldsel = nil
			if SelectedRow == Track then
				local numtracks = table.getn(ValidTracks)
				oldsel = SelectedTrack
				SelectedTrack = math.mod(SelectedTrack - 2 + numtracks, numtracks) + 1
			else
				local selectedItem = GetSelectedItem(Options, SelectedRow) - 1
				local numItems = GetNumItems(Options, SelectedRow)
				if selectedItem < 1 then
					selectedItem = numItems
				end
				SetSelectedItem(Options, SelectedRow, selectedItem)
			end
			if Options[SelectedRow][OnChanged] then
				Options[SelectedRow][OnChanged]()
			end
			RefreshInfo(self)
			UpdateArrows(self)
		elseif VirtualKey == KeyCodes["BUTTON_RIGHT"] then
			playmenusound_move()
			local oldsel = nil
			if SelectedRow == Track then
				SelectedTrack = math.mod(SelectedTrack, table.getn(ValidTracks)) + 1
			else
				local selectedItem = GetSelectedItem(Options, SelectedRow) + 1
				local numItems = GetNumItems(Options, SelectedRow)
				if selectedItem > numItems then
					selectedItem = 1
				end
				SetSelectedItem(Options, SelectedRow, selectedItem)
			end
			if Options[SelectedRow][OnChanged] then
				Options[SelectedRow][OnChanged]()
			end
			RefreshInfo(self)
			UpdateArrows(self)
		elseif VirtualKey == KeyCodes["BUTTON_DOWN"] then
			playmenusound_move()
			local prevsel = SelectedRow
			repeat
				SelectedRow = SelectedRow + 1
				if SelectedRow == NumOptions + 1 then
					SelectedRow = NumOptions
				end
			until SelectedRow == NumOptions or Options[SelectedRow][Enabled] == true
			if SelectedRow == NumOptions and Options[SelectedRow][Enabled] == false then
				SelectedRow = prevsel
			end
			RefreshInfo(self)
			UpdateArrows(self)
		elseif VirtualKey == KeyCodes["BUTTON_UP"] then
			playmenusound_move()
			local prevsel = SelectedRow
			repeat
				SelectedRow = SelectedRow - 1
				if SelectedRow == 0 then
					SelectedRow = 1
				end
			until SelectedRow == 1 or Options[SelectedRow][Enabled] == true
			if SelectedRow == 1 and Options[SelectedRow][Enabled] == false then
				SelectedRow = prevsel
			end
			RefreshInfo(self)
			UpdateArrows(self)
		end
	end
	
	GUI:SetHelpButtons(BUTTON_OK,TRANSLATOR(UI_SELECT),BUTTON_BACK,TRANSLATOR(UI_BACK))
end

function menu_multiplayer_trackselection.deinit(self)
	self.parent:deinit(self)
end

function menu_multiplayer_trackselection.update(self,time)
	self.parent:update(self,time)
end
